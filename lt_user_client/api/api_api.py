# coding: utf-8

"""
    Legaltext API

    API for Legaltext  # noqa: E501

    OpenAPI spec version: v1.1.1a0-oas3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from lt_user_client.api_client import ApiClient


class ApiApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_category_create(self, body, **kwargs):  # noqa: E501
        """api_category_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_category_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CategoryRequest body: (required)
        :return: Category
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_category_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_category_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_category_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """api_category_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_category_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CategoryRequest body: (required)
        :return: Category
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_category_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_category_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'icon' in params:
            form_params.append(('icon', params['icon']))  # noqa: E501
        if 'color' in params:
            form_params.append(('color', params['color']))  # noqa: E501
        if 'parent' in params:
            form_params.append(('parent', params['parent']))  # noqa: E501
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'icon' in params:
            form_params.append(('icon', params['icon']))  # noqa: E501
        if 'color' in params:
            form_params.append(('color', params['color']))  # noqa: E501
        if 'parent' in params:
            form_params.append(('parent', params['parent']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/category/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Category',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_category_create(self, title2, description2, icon2, color2, parent2, title, description, icon, color, parent, **kwargs):  # noqa: E501
        """api_category_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_category_create(title2, description2, icon2, color2, parent2, title, description, icon, color, parent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title2: (required)
        :param str description2: (required)
        :param str icon2: (required)
        :param str color2: (required)
        :param int parent2: (required)
        :param str title: (required)
        :param str description: (required)
        :param str icon: (required)
        :param str color: (required)
        :param int parent: (required)
        :return: Category
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_category_create_with_http_info(title2, description2, icon2, color2, parent2, title, description, icon, color, parent, **kwargs)  # noqa: E501
        else:
            (data) = self.api_category_create_with_http_info(title2, description2, icon2, color2, parent2, title, description, icon, color, parent, **kwargs)  # noqa: E501
            return data

    def api_category_create_with_http_info(self, title2, description2, icon2, color2, parent2, title, description, icon, color, parent, **kwargs):  # noqa: E501
        """api_category_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_category_create_with_http_info(title2, description2, icon2, color2, parent2, title, description, icon, color, parent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title2: (required)
        :param str description2: (required)
        :param str icon2: (required)
        :param str color2: (required)
        :param int parent2: (required)
        :param str title: (required)
        :param str description: (required)
        :param str icon: (required)
        :param str color: (required)
        :param int parent: (required)
        :return: Category
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['title2', 'description2', 'icon2', 'color2', 'parent2', 'title', 'description', 'icon', 'color', 'parent']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_category_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'title2' is set
        if ('title2' not in params or
                params['title2'] is None):
            raise ValueError("Missing the required parameter `title2` when calling `api_category_create`")  # noqa: E501
        # verify the required parameter 'description2' is set
        if ('description2' not in params or
                params['description2'] is None):
            raise ValueError("Missing the required parameter `description2` when calling `api_category_create`")  # noqa: E501
        # verify the required parameter 'icon2' is set
        if ('icon2' not in params or
                params['icon2'] is None):
            raise ValueError("Missing the required parameter `icon2` when calling `api_category_create`")  # noqa: E501
        # verify the required parameter 'color2' is set
        if ('color2' not in params or
                params['color2'] is None):
            raise ValueError("Missing the required parameter `color2` when calling `api_category_create`")  # noqa: E501
        # verify the required parameter 'parent2' is set
        if ('parent2' not in params or
                params['parent2'] is None):
            raise ValueError("Missing the required parameter `parent2` when calling `api_category_create`")  # noqa: E501
        # verify the required parameter 'title' is set
        if ('title' not in params or
                params['title'] is None):
            raise ValueError("Missing the required parameter `title` when calling `api_category_create`")  # noqa: E501
        # verify the required parameter 'description' is set
        if ('description' not in params or
                params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `api_category_create`")  # noqa: E501
        # verify the required parameter 'icon' is set
        if ('icon' not in params or
                params['icon'] is None):
            raise ValueError("Missing the required parameter `icon` when calling `api_category_create`")  # noqa: E501
        # verify the required parameter 'color' is set
        if ('color' not in params or
                params['color'] is None):
            raise ValueError("Missing the required parameter `color` when calling `api_category_create`")  # noqa: E501
        # verify the required parameter 'parent' is set
        if ('parent' not in params or
                params['parent'] is None):
            raise ValueError("Missing the required parameter `parent` when calling `api_category_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'icon' in params:
            form_params.append(('icon', params['icon']))  # noqa: E501
        if 'color' in params:
            form_params.append(('color', params['color']))  # noqa: E501
        if 'parent' in params:
            form_params.append(('parent', params['parent']))  # noqa: E501
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'icon' in params:
            form_params.append(('icon', params['icon']))  # noqa: E501
        if 'color' in params:
            form_params.append(('color', params['color']))  # noqa: E501
        if 'parent' in params:
            form_params.append(('parent', params['parent']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/category/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Category',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_category_create(self, title2, description2, icon2, color2, parent2, title, description, icon, color, parent, **kwargs):  # noqa: E501
        """api_category_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_category_create(title2, description2, icon2, color2, parent2, title, description, icon, color, parent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title2: (required)
        :param str description2: (required)
        :param str icon2: (required)
        :param str color2: (required)
        :param int parent2: (required)
        :param str title: (required)
        :param str description: (required)
        :param str icon: (required)
        :param str color: (required)
        :param int parent: (required)
        :return: Category
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_category_create_with_http_info(title2, description2, icon2, color2, parent2, title, description, icon, color, parent, **kwargs)  # noqa: E501
        else:
            (data) = self.api_category_create_with_http_info(title2, description2, icon2, color2, parent2, title, description, icon, color, parent, **kwargs)  # noqa: E501
            return data

    def api_category_create_with_http_info(self, title2, description2, icon2, color2, parent2, title, description, icon, color, parent, **kwargs):  # noqa: E501
        """api_category_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_category_create_with_http_info(title2, description2, icon2, color2, parent2, title, description, icon, color, parent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title2: (required)
        :param str description2: (required)
        :param str icon2: (required)
        :param str color2: (required)
        :param int parent2: (required)
        :param str title: (required)
        :param str description: (required)
        :param str icon: (required)
        :param str color: (required)
        :param int parent: (required)
        :return: Category
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['title2', 'description2', 'icon2', 'color2', 'parent2', 'title', 'description', 'icon', 'color', 'parent']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_category_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'title2' is set
        if ('title2' not in params or
                params['title2'] is None):
            raise ValueError("Missing the required parameter `title2` when calling `api_category_create`")  # noqa: E501
        # verify the required parameter 'description2' is set
        if ('description2' not in params or
                params['description2'] is None):
            raise ValueError("Missing the required parameter `description2` when calling `api_category_create`")  # noqa: E501
        # verify the required parameter 'icon2' is set
        if ('icon2' not in params or
                params['icon2'] is None):
            raise ValueError("Missing the required parameter `icon2` when calling `api_category_create`")  # noqa: E501
        # verify the required parameter 'color2' is set
        if ('color2' not in params or
                params['color2'] is None):
            raise ValueError("Missing the required parameter `color2` when calling `api_category_create`")  # noqa: E501
        # verify the required parameter 'parent2' is set
        if ('parent2' not in params or
                params['parent2'] is None):
            raise ValueError("Missing the required parameter `parent2` when calling `api_category_create`")  # noqa: E501
        # verify the required parameter 'title' is set
        if ('title' not in params or
                params['title'] is None):
            raise ValueError("Missing the required parameter `title` when calling `api_category_create`")  # noqa: E501
        # verify the required parameter 'description' is set
        if ('description' not in params or
                params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `api_category_create`")  # noqa: E501
        # verify the required parameter 'icon' is set
        if ('icon' not in params or
                params['icon'] is None):
            raise ValueError("Missing the required parameter `icon` when calling `api_category_create`")  # noqa: E501
        # verify the required parameter 'color' is set
        if ('color' not in params or
                params['color'] is None):
            raise ValueError("Missing the required parameter `color` when calling `api_category_create`")  # noqa: E501
        # verify the required parameter 'parent' is set
        if ('parent' not in params or
                params['parent'] is None):
            raise ValueError("Missing the required parameter `parent` when calling `api_category_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'icon' in params:
            form_params.append(('icon', params['icon']))  # noqa: E501
        if 'color' in params:
            form_params.append(('color', params['color']))  # noqa: E501
        if 'parent' in params:
            form_params.append(('parent', params['parent']))  # noqa: E501
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'icon' in params:
            form_params.append(('icon', params['icon']))  # noqa: E501
        if 'color' in params:
            form_params.append(('color', params['color']))  # noqa: E501
        if 'parent' in params:
            form_params.append(('parent', params['parent']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/category/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Category',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_category_destroy(self, id, **kwargs):  # noqa: E501
        """api_category_destroy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_category_destroy(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this category. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_category_destroy_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_category_destroy_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_category_destroy_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_category_destroy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_category_destroy_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this category. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_category_destroy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_category_destroy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/category/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_category_list(self, **kwargs):  # noqa: E501
        """api_category_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_category_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: PaginatedCategoryList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_category_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_category_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_category_list_with_http_info(self, **kwargs):  # noqa: E501
        """api_category_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_category_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: PaginatedCategoryList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_category_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/category/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedCategoryList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_category_partial_update(self, id, **kwargs):  # noqa: E501
        """api_category_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_category_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this category. (required)
        :param PatchedCategoryRequest body:
        :return: Category
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_category_partial_update_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_category_partial_update_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_category_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_category_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_category_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this category. (required)
        :param PatchedCategoryRequest body:
        :return: Category
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_category_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_category_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'icon' in params:
            form_params.append(('icon', params['icon']))  # noqa: E501
        if 'color' in params:
            form_params.append(('color', params['color']))  # noqa: E501
        if 'parent' in params:
            form_params.append(('parent', params['parent']))  # noqa: E501
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'icon' in params:
            form_params.append(('icon', params['icon']))  # noqa: E501
        if 'color' in params:
            form_params.append(('color', params['color']))  # noqa: E501
        if 'parent' in params:
            form_params.append(('parent', params['parent']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/category/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Category',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_category_partial_update(self, id, **kwargs):  # noqa: E501
        """api_category_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_category_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this category. (required)
        :param str title2:
        :param str description2:
        :param str icon2:
        :param str color2:
        :param int parent2:
        :param str title:
        :param str description:
        :param str icon:
        :param str color:
        :param int parent:
        :return: Category
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_category_partial_update_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_category_partial_update_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_category_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_category_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_category_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this category. (required)
        :param str title2:
        :param str description2:
        :param str icon2:
        :param str color2:
        :param int parent2:
        :param str title:
        :param str description:
        :param str icon:
        :param str color:
        :param int parent:
        :return: Category
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'title2', 'description2', 'icon2', 'color2', 'parent2', 'title', 'description', 'icon', 'color', 'parent']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_category_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_category_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'icon' in params:
            form_params.append(('icon', params['icon']))  # noqa: E501
        if 'color' in params:
            form_params.append(('color', params['color']))  # noqa: E501
        if 'parent' in params:
            form_params.append(('parent', params['parent']))  # noqa: E501
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'icon' in params:
            form_params.append(('icon', params['icon']))  # noqa: E501
        if 'color' in params:
            form_params.append(('color', params['color']))  # noqa: E501
        if 'parent' in params:
            form_params.append(('parent', params['parent']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/category/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Category',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_category_partial_update(self, id, **kwargs):  # noqa: E501
        """api_category_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_category_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this category. (required)
        :param str title2:
        :param str description2:
        :param str icon2:
        :param str color2:
        :param int parent2:
        :param str title:
        :param str description:
        :param str icon:
        :param str color:
        :param int parent:
        :return: Category
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_category_partial_update_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_category_partial_update_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_category_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_category_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_category_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this category. (required)
        :param str title2:
        :param str description2:
        :param str icon2:
        :param str color2:
        :param int parent2:
        :param str title:
        :param str description:
        :param str icon:
        :param str color:
        :param int parent:
        :return: Category
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'title2', 'description2', 'icon2', 'color2', 'parent2', 'title', 'description', 'icon', 'color', 'parent']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_category_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_category_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'icon' in params:
            form_params.append(('icon', params['icon']))  # noqa: E501
        if 'color' in params:
            form_params.append(('color', params['color']))  # noqa: E501
        if 'parent' in params:
            form_params.append(('parent', params['parent']))  # noqa: E501
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'icon' in params:
            form_params.append(('icon', params['icon']))  # noqa: E501
        if 'color' in params:
            form_params.append(('color', params['color']))  # noqa: E501
        if 'parent' in params:
            form_params.append(('parent', params['parent']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/category/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Category',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_category_retrieve(self, id, **kwargs):  # noqa: E501
        """api_category_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_category_retrieve(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this category. (required)
        :return: Category
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_category_retrieve_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_category_retrieve_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_category_retrieve_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_category_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_category_retrieve_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this category. (required)
        :return: Category
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_category_retrieve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_category_retrieve`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/category/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Category',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_category_update(self, body, id, **kwargs):  # noqa: E501
        """api_category_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_category_update(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CategoryRequest body: (required)
        :param int id: A unique integer value identifying this category. (required)
        :return: Category
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_category_update_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_category_update_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def api_category_update_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """api_category_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_category_update_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CategoryRequest body: (required)
        :param int id: A unique integer value identifying this category. (required)
        :return: Category
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_category_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_category_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_category_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'icon' in params:
            form_params.append(('icon', params['icon']))  # noqa: E501
        if 'color' in params:
            form_params.append(('color', params['color']))  # noqa: E501
        if 'parent' in params:
            form_params.append(('parent', params['parent']))  # noqa: E501
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'icon' in params:
            form_params.append(('icon', params['icon']))  # noqa: E501
        if 'color' in params:
            form_params.append(('color', params['color']))  # noqa: E501
        if 'parent' in params:
            form_params.append(('parent', params['parent']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/category/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Category',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_category_update(self, title2, description2, icon2, color2, parent2, title, description, icon, color, parent, id, **kwargs):  # noqa: E501
        """api_category_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_category_update(title2, description2, icon2, color2, parent2, title, description, icon, color, parent, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title2: (required)
        :param str description2: (required)
        :param str icon2: (required)
        :param str color2: (required)
        :param int parent2: (required)
        :param str title: (required)
        :param str description: (required)
        :param str icon: (required)
        :param str color: (required)
        :param int parent: (required)
        :param int id: A unique integer value identifying this category. (required)
        :return: Category
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_category_update_with_http_info(title2, description2, icon2, color2, parent2, title, description, icon, color, parent, id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_category_update_with_http_info(title2, description2, icon2, color2, parent2, title, description, icon, color, parent, id, **kwargs)  # noqa: E501
            return data

    def api_category_update_with_http_info(self, title2, description2, icon2, color2, parent2, title, description, icon, color, parent, id, **kwargs):  # noqa: E501
        """api_category_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_category_update_with_http_info(title2, description2, icon2, color2, parent2, title, description, icon, color, parent, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title2: (required)
        :param str description2: (required)
        :param str icon2: (required)
        :param str color2: (required)
        :param int parent2: (required)
        :param str title: (required)
        :param str description: (required)
        :param str icon: (required)
        :param str color: (required)
        :param int parent: (required)
        :param int id: A unique integer value identifying this category. (required)
        :return: Category
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['title2', 'description2', 'icon2', 'color2', 'parent2', 'title', 'description', 'icon', 'color', 'parent', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_category_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'title2' is set
        if ('title2' not in params or
                params['title2'] is None):
            raise ValueError("Missing the required parameter `title2` when calling `api_category_update`")  # noqa: E501
        # verify the required parameter 'description2' is set
        if ('description2' not in params or
                params['description2'] is None):
            raise ValueError("Missing the required parameter `description2` when calling `api_category_update`")  # noqa: E501
        # verify the required parameter 'icon2' is set
        if ('icon2' not in params or
                params['icon2'] is None):
            raise ValueError("Missing the required parameter `icon2` when calling `api_category_update`")  # noqa: E501
        # verify the required parameter 'color2' is set
        if ('color2' not in params or
                params['color2'] is None):
            raise ValueError("Missing the required parameter `color2` when calling `api_category_update`")  # noqa: E501
        # verify the required parameter 'parent2' is set
        if ('parent2' not in params or
                params['parent2'] is None):
            raise ValueError("Missing the required parameter `parent2` when calling `api_category_update`")  # noqa: E501
        # verify the required parameter 'title' is set
        if ('title' not in params or
                params['title'] is None):
            raise ValueError("Missing the required parameter `title` when calling `api_category_update`")  # noqa: E501
        # verify the required parameter 'description' is set
        if ('description' not in params or
                params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `api_category_update`")  # noqa: E501
        # verify the required parameter 'icon' is set
        if ('icon' not in params or
                params['icon'] is None):
            raise ValueError("Missing the required parameter `icon` when calling `api_category_update`")  # noqa: E501
        # verify the required parameter 'color' is set
        if ('color' not in params or
                params['color'] is None):
            raise ValueError("Missing the required parameter `color` when calling `api_category_update`")  # noqa: E501
        # verify the required parameter 'parent' is set
        if ('parent' not in params or
                params['parent'] is None):
            raise ValueError("Missing the required parameter `parent` when calling `api_category_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_category_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'icon' in params:
            form_params.append(('icon', params['icon']))  # noqa: E501
        if 'color' in params:
            form_params.append(('color', params['color']))  # noqa: E501
        if 'parent' in params:
            form_params.append(('parent', params['parent']))  # noqa: E501
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'icon' in params:
            form_params.append(('icon', params['icon']))  # noqa: E501
        if 'color' in params:
            form_params.append(('color', params['color']))  # noqa: E501
        if 'parent' in params:
            form_params.append(('parent', params['parent']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/category/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Category',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_category_update(self, title2, description2, icon2, color2, parent2, title, description, icon, color, parent, id, **kwargs):  # noqa: E501
        """api_category_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_category_update(title2, description2, icon2, color2, parent2, title, description, icon, color, parent, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title2: (required)
        :param str description2: (required)
        :param str icon2: (required)
        :param str color2: (required)
        :param int parent2: (required)
        :param str title: (required)
        :param str description: (required)
        :param str icon: (required)
        :param str color: (required)
        :param int parent: (required)
        :param int id: A unique integer value identifying this category. (required)
        :return: Category
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_category_update_with_http_info(title2, description2, icon2, color2, parent2, title, description, icon, color, parent, id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_category_update_with_http_info(title2, description2, icon2, color2, parent2, title, description, icon, color, parent, id, **kwargs)  # noqa: E501
            return data

    def api_category_update_with_http_info(self, title2, description2, icon2, color2, parent2, title, description, icon, color, parent, id, **kwargs):  # noqa: E501
        """api_category_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_category_update_with_http_info(title2, description2, icon2, color2, parent2, title, description, icon, color, parent, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title2: (required)
        :param str description2: (required)
        :param str icon2: (required)
        :param str color2: (required)
        :param int parent2: (required)
        :param str title: (required)
        :param str description: (required)
        :param str icon: (required)
        :param str color: (required)
        :param int parent: (required)
        :param int id: A unique integer value identifying this category. (required)
        :return: Category
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['title2', 'description2', 'icon2', 'color2', 'parent2', 'title', 'description', 'icon', 'color', 'parent', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_category_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'title2' is set
        if ('title2' not in params or
                params['title2'] is None):
            raise ValueError("Missing the required parameter `title2` when calling `api_category_update`")  # noqa: E501
        # verify the required parameter 'description2' is set
        if ('description2' not in params or
                params['description2'] is None):
            raise ValueError("Missing the required parameter `description2` when calling `api_category_update`")  # noqa: E501
        # verify the required parameter 'icon2' is set
        if ('icon2' not in params or
                params['icon2'] is None):
            raise ValueError("Missing the required parameter `icon2` when calling `api_category_update`")  # noqa: E501
        # verify the required parameter 'color2' is set
        if ('color2' not in params or
                params['color2'] is None):
            raise ValueError("Missing the required parameter `color2` when calling `api_category_update`")  # noqa: E501
        # verify the required parameter 'parent2' is set
        if ('parent2' not in params or
                params['parent2'] is None):
            raise ValueError("Missing the required parameter `parent2` when calling `api_category_update`")  # noqa: E501
        # verify the required parameter 'title' is set
        if ('title' not in params or
                params['title'] is None):
            raise ValueError("Missing the required parameter `title` when calling `api_category_update`")  # noqa: E501
        # verify the required parameter 'description' is set
        if ('description' not in params or
                params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `api_category_update`")  # noqa: E501
        # verify the required parameter 'icon' is set
        if ('icon' not in params or
                params['icon'] is None):
            raise ValueError("Missing the required parameter `icon` when calling `api_category_update`")  # noqa: E501
        # verify the required parameter 'color' is set
        if ('color' not in params or
                params['color'] is None):
            raise ValueError("Missing the required parameter `color` when calling `api_category_update`")  # noqa: E501
        # verify the required parameter 'parent' is set
        if ('parent' not in params or
                params['parent'] is None):
            raise ValueError("Missing the required parameter `parent` when calling `api_category_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_category_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'icon' in params:
            form_params.append(('icon', params['icon']))  # noqa: E501
        if 'color' in params:
            form_params.append(('color', params['color']))  # noqa: E501
        if 'parent' in params:
            form_params.append(('parent', params['parent']))  # noqa: E501
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'icon' in params:
            form_params.append(('icon', params['icon']))  # noqa: E501
        if 'color' in params:
            form_params.append(('color', params['color']))  # noqa: E501
        if 'parent' in params:
            form_params.append(('parent', params['parent']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/category/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Category',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_document_create(self, body, **kwargs):  # noqa: E501
        """api_document_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DocumentRequest body: (required)
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_document_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_document_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_document_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """api_document_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DocumentRequest body: (required)
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_document_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_document_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'display_html' in params:
            form_params.append(('display_html', params['display_html']))  # noqa: E501
        if 'published' in params:
            form_params.append(('published', params['published']))  # noqa: E501
        if 'category' in params:
            form_params.append(('category', params['category']))  # noqa: E501
        if 'document_type' in params:
            form_params.append(('document_type', params['document_type']))  # noqa: E501
        if 'publisher' in params:
            form_params.append(('publisher', params['publisher']))  # noqa: E501
        if 'related_documents' in params:
            form_params.append(('related_documents', params['related_documents']))  # noqa: E501
            collection_formats['related_documents'] = 'multi'  # noqa: E501
        if 'sites' in params:
            form_params.append(('sites', params['sites']))  # noqa: E501
            collection_formats['sites'] = 'multi'  # noqa: E501
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'display_html' in params:
            form_params.append(('display_html', params['display_html']))  # noqa: E501
        if 'published' in params:
            form_params.append(('published', params['published']))  # noqa: E501
        if 'category' in params:
            form_params.append(('category', params['category']))  # noqa: E501
        if 'document_type' in params:
            form_params.append(('document_type', params['document_type']))  # noqa: E501
        if 'publisher' in params:
            form_params.append(('publisher', params['publisher']))  # noqa: E501
        if 'related_documents' in params:
            form_params.append(('related_documents', params['related_documents']))  # noqa: E501
            collection_formats['related_documents'] = 'multi'  # noqa: E501
        if 'sites' in params:
            form_params.append(('sites', params['sites']))  # noqa: E501
            collection_formats['sites'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/document/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_document_create(self, file2, title2, description2, display_html2, published2, category2, document_type2, publisher2, related_documents2, sites2, file, title, description, display_html, published, category, document_type, publisher, related_documents, sites, **kwargs):  # noqa: E501
        """api_document_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_create(file2, title2, description2, display_html2, published2, category2, document_type2, publisher2, related_documents2, sites2, file, title, description, display_html, published, category, document_type, publisher, related_documents, sites, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file2: (required)
        :param str title2: (required)
        :param str description2: (required)
        :param str display_html2: (required)
        :param bool published2: (required)
        :param int category2: (required)
        :param int document_type2: (required)
        :param int publisher2: (required)
        :param list[int] related_documents2: (required)
        :param list[int] sites2: (required)
        :param str file: (required)
        :param str title: (required)
        :param str description: (required)
        :param str display_html: (required)
        :param bool published: (required)
        :param int category: (required)
        :param int document_type: (required)
        :param int publisher: (required)
        :param list[int] related_documents: (required)
        :param list[int] sites: (required)
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_document_create_with_http_info(file2, title2, description2, display_html2, published2, category2, document_type2, publisher2, related_documents2, sites2, file, title, description, display_html, published, category, document_type, publisher, related_documents, sites, **kwargs)  # noqa: E501
        else:
            (data) = self.api_document_create_with_http_info(file2, title2, description2, display_html2, published2, category2, document_type2, publisher2, related_documents2, sites2, file, title, description, display_html, published, category, document_type, publisher, related_documents, sites, **kwargs)  # noqa: E501
            return data

    def api_document_create_with_http_info(self, file2, title2, description2, display_html2, published2, category2, document_type2, publisher2, related_documents2, sites2, file, title, description, display_html, published, category, document_type, publisher, related_documents, sites, **kwargs):  # noqa: E501
        """api_document_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_create_with_http_info(file2, title2, description2, display_html2, published2, category2, document_type2, publisher2, related_documents2, sites2, file, title, description, display_html, published, category, document_type, publisher, related_documents, sites, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file2: (required)
        :param str title2: (required)
        :param str description2: (required)
        :param str display_html2: (required)
        :param bool published2: (required)
        :param int category2: (required)
        :param int document_type2: (required)
        :param int publisher2: (required)
        :param list[int] related_documents2: (required)
        :param list[int] sites2: (required)
        :param str file: (required)
        :param str title: (required)
        :param str description: (required)
        :param str display_html: (required)
        :param bool published: (required)
        :param int category: (required)
        :param int document_type: (required)
        :param int publisher: (required)
        :param list[int] related_documents: (required)
        :param list[int] sites: (required)
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file2', 'title2', 'description2', 'display_html2', 'published2', 'category2', 'document_type2', 'publisher2', 'related_documents2', 'sites2', 'file', 'title', 'description', 'display_html', 'published', 'category', 'document_type', 'publisher', 'related_documents', 'sites']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_document_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file2' is set
        if ('file2' not in params or
                params['file2'] is None):
            raise ValueError("Missing the required parameter `file2` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'title2' is set
        if ('title2' not in params or
                params['title2'] is None):
            raise ValueError("Missing the required parameter `title2` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'description2' is set
        if ('description2' not in params or
                params['description2'] is None):
            raise ValueError("Missing the required parameter `description2` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'display_html2' is set
        if ('display_html2' not in params or
                params['display_html2'] is None):
            raise ValueError("Missing the required parameter `display_html2` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'published2' is set
        if ('published2' not in params or
                params['published2'] is None):
            raise ValueError("Missing the required parameter `published2` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'category2' is set
        if ('category2' not in params or
                params['category2'] is None):
            raise ValueError("Missing the required parameter `category2` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'document_type2' is set
        if ('document_type2' not in params or
                params['document_type2'] is None):
            raise ValueError("Missing the required parameter `document_type2` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'publisher2' is set
        if ('publisher2' not in params or
                params['publisher2'] is None):
            raise ValueError("Missing the required parameter `publisher2` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'related_documents2' is set
        if ('related_documents2' not in params or
                params['related_documents2'] is None):
            raise ValueError("Missing the required parameter `related_documents2` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'sites2' is set
        if ('sites2' not in params or
                params['sites2'] is None):
            raise ValueError("Missing the required parameter `sites2` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'title' is set
        if ('title' not in params or
                params['title'] is None):
            raise ValueError("Missing the required parameter `title` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'description' is set
        if ('description' not in params or
                params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'display_html' is set
        if ('display_html' not in params or
                params['display_html'] is None):
            raise ValueError("Missing the required parameter `display_html` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'published' is set
        if ('published' not in params or
                params['published'] is None):
            raise ValueError("Missing the required parameter `published` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'category' is set
        if ('category' not in params or
                params['category'] is None):
            raise ValueError("Missing the required parameter `category` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'document_type' is set
        if ('document_type' not in params or
                params['document_type'] is None):
            raise ValueError("Missing the required parameter `document_type` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'publisher' is set
        if ('publisher' not in params or
                params['publisher'] is None):
            raise ValueError("Missing the required parameter `publisher` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'related_documents' is set
        if ('related_documents' not in params or
                params['related_documents'] is None):
            raise ValueError("Missing the required parameter `related_documents` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'sites' is set
        if ('sites' not in params or
                params['sites'] is None):
            raise ValueError("Missing the required parameter `sites` when calling `api_document_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'display_html' in params:
            form_params.append(('display_html', params['display_html']))  # noqa: E501
        if 'published' in params:
            form_params.append(('published', params['published']))  # noqa: E501
        if 'category' in params:
            form_params.append(('category', params['category']))  # noqa: E501
        if 'document_type' in params:
            form_params.append(('document_type', params['document_type']))  # noqa: E501
        if 'publisher' in params:
            form_params.append(('publisher', params['publisher']))  # noqa: E501
        if 'related_documents' in params:
            form_params.append(('related_documents', params['related_documents']))  # noqa: E501
            collection_formats['related_documents'] = 'multi'  # noqa: E501
        if 'sites' in params:
            form_params.append(('sites', params['sites']))  # noqa: E501
            collection_formats['sites'] = 'multi'  # noqa: E501
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'display_html' in params:
            form_params.append(('display_html', params['display_html']))  # noqa: E501
        if 'published' in params:
            form_params.append(('published', params['published']))  # noqa: E501
        if 'category' in params:
            form_params.append(('category', params['category']))  # noqa: E501
        if 'document_type' in params:
            form_params.append(('document_type', params['document_type']))  # noqa: E501
        if 'publisher' in params:
            form_params.append(('publisher', params['publisher']))  # noqa: E501
        if 'related_documents' in params:
            form_params.append(('related_documents', params['related_documents']))  # noqa: E501
            collection_formats['related_documents'] = 'multi'  # noqa: E501
        if 'sites' in params:
            form_params.append(('sites', params['sites']))  # noqa: E501
            collection_formats['sites'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/document/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_document_create(self, file2, title2, description2, display_html2, published2, category2, document_type2, publisher2, related_documents2, sites2, file, title, description, display_html, published, category, document_type, publisher, related_documents, sites, **kwargs):  # noqa: E501
        """api_document_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_create(file2, title2, description2, display_html2, published2, category2, document_type2, publisher2, related_documents2, sites2, file, title, description, display_html, published, category, document_type, publisher, related_documents, sites, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file2: (required)
        :param str title2: (required)
        :param str description2: (required)
        :param str display_html2: (required)
        :param bool published2: (required)
        :param int category2: (required)
        :param int document_type2: (required)
        :param int publisher2: (required)
        :param list[int] related_documents2: (required)
        :param list[int] sites2: (required)
        :param str file: (required)
        :param str title: (required)
        :param str description: (required)
        :param str display_html: (required)
        :param bool published: (required)
        :param int category: (required)
        :param int document_type: (required)
        :param int publisher: (required)
        :param list[int] related_documents: (required)
        :param list[int] sites: (required)
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_document_create_with_http_info(file2, title2, description2, display_html2, published2, category2, document_type2, publisher2, related_documents2, sites2, file, title, description, display_html, published, category, document_type, publisher, related_documents, sites, **kwargs)  # noqa: E501
        else:
            (data) = self.api_document_create_with_http_info(file2, title2, description2, display_html2, published2, category2, document_type2, publisher2, related_documents2, sites2, file, title, description, display_html, published, category, document_type, publisher, related_documents, sites, **kwargs)  # noqa: E501
            return data

    def api_document_create_with_http_info(self, file2, title2, description2, display_html2, published2, category2, document_type2, publisher2, related_documents2, sites2, file, title, description, display_html, published, category, document_type, publisher, related_documents, sites, **kwargs):  # noqa: E501
        """api_document_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_create_with_http_info(file2, title2, description2, display_html2, published2, category2, document_type2, publisher2, related_documents2, sites2, file, title, description, display_html, published, category, document_type, publisher, related_documents, sites, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file2: (required)
        :param str title2: (required)
        :param str description2: (required)
        :param str display_html2: (required)
        :param bool published2: (required)
        :param int category2: (required)
        :param int document_type2: (required)
        :param int publisher2: (required)
        :param list[int] related_documents2: (required)
        :param list[int] sites2: (required)
        :param str file: (required)
        :param str title: (required)
        :param str description: (required)
        :param str display_html: (required)
        :param bool published: (required)
        :param int category: (required)
        :param int document_type: (required)
        :param int publisher: (required)
        :param list[int] related_documents: (required)
        :param list[int] sites: (required)
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file2', 'title2', 'description2', 'display_html2', 'published2', 'category2', 'document_type2', 'publisher2', 'related_documents2', 'sites2', 'file', 'title', 'description', 'display_html', 'published', 'category', 'document_type', 'publisher', 'related_documents', 'sites']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_document_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file2' is set
        if ('file2' not in params or
                params['file2'] is None):
            raise ValueError("Missing the required parameter `file2` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'title2' is set
        if ('title2' not in params or
                params['title2'] is None):
            raise ValueError("Missing the required parameter `title2` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'description2' is set
        if ('description2' not in params or
                params['description2'] is None):
            raise ValueError("Missing the required parameter `description2` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'display_html2' is set
        if ('display_html2' not in params or
                params['display_html2'] is None):
            raise ValueError("Missing the required parameter `display_html2` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'published2' is set
        if ('published2' not in params or
                params['published2'] is None):
            raise ValueError("Missing the required parameter `published2` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'category2' is set
        if ('category2' not in params or
                params['category2'] is None):
            raise ValueError("Missing the required parameter `category2` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'document_type2' is set
        if ('document_type2' not in params or
                params['document_type2'] is None):
            raise ValueError("Missing the required parameter `document_type2` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'publisher2' is set
        if ('publisher2' not in params or
                params['publisher2'] is None):
            raise ValueError("Missing the required parameter `publisher2` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'related_documents2' is set
        if ('related_documents2' not in params or
                params['related_documents2'] is None):
            raise ValueError("Missing the required parameter `related_documents2` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'sites2' is set
        if ('sites2' not in params or
                params['sites2'] is None):
            raise ValueError("Missing the required parameter `sites2` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'title' is set
        if ('title' not in params or
                params['title'] is None):
            raise ValueError("Missing the required parameter `title` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'description' is set
        if ('description' not in params or
                params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'display_html' is set
        if ('display_html' not in params or
                params['display_html'] is None):
            raise ValueError("Missing the required parameter `display_html` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'published' is set
        if ('published' not in params or
                params['published'] is None):
            raise ValueError("Missing the required parameter `published` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'category' is set
        if ('category' not in params or
                params['category'] is None):
            raise ValueError("Missing the required parameter `category` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'document_type' is set
        if ('document_type' not in params or
                params['document_type'] is None):
            raise ValueError("Missing the required parameter `document_type` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'publisher' is set
        if ('publisher' not in params or
                params['publisher'] is None):
            raise ValueError("Missing the required parameter `publisher` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'related_documents' is set
        if ('related_documents' not in params or
                params['related_documents'] is None):
            raise ValueError("Missing the required parameter `related_documents` when calling `api_document_create`")  # noqa: E501
        # verify the required parameter 'sites' is set
        if ('sites' not in params or
                params['sites'] is None):
            raise ValueError("Missing the required parameter `sites` when calling `api_document_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'display_html' in params:
            form_params.append(('display_html', params['display_html']))  # noqa: E501
        if 'published' in params:
            form_params.append(('published', params['published']))  # noqa: E501
        if 'category' in params:
            form_params.append(('category', params['category']))  # noqa: E501
        if 'document_type' in params:
            form_params.append(('document_type', params['document_type']))  # noqa: E501
        if 'publisher' in params:
            form_params.append(('publisher', params['publisher']))  # noqa: E501
        if 'related_documents' in params:
            form_params.append(('related_documents', params['related_documents']))  # noqa: E501
            collection_formats['related_documents'] = 'multi'  # noqa: E501
        if 'sites' in params:
            form_params.append(('sites', params['sites']))  # noqa: E501
            collection_formats['sites'] = 'multi'  # noqa: E501
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'display_html' in params:
            form_params.append(('display_html', params['display_html']))  # noqa: E501
        if 'published' in params:
            form_params.append(('published', params['published']))  # noqa: E501
        if 'category' in params:
            form_params.append(('category', params['category']))  # noqa: E501
        if 'document_type' in params:
            form_params.append(('document_type', params['document_type']))  # noqa: E501
        if 'publisher' in params:
            form_params.append(('publisher', params['publisher']))  # noqa: E501
        if 'related_documents' in params:
            form_params.append(('related_documents', params['related_documents']))  # noqa: E501
            collection_formats['related_documents'] = 'multi'  # noqa: E501
        if 'sites' in params:
            form_params.append(('sites', params['sites']))  # noqa: E501
            collection_formats['sites'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/document/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_document_destroy(self, id, **kwargs):  # noqa: E501
        """api_document_destroy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_destroy(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this document. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_document_destroy_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_document_destroy_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_document_destroy_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_document_destroy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_destroy_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this document. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_document_destroy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_document_destroy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/document/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_document_list(self, **kwargs):  # noqa: E501
        """api_document_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: PaginatedDocumentList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_document_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_document_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_document_list_with_http_info(self, **kwargs):  # noqa: E501
        """api_document_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: PaginatedDocumentList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_document_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/document/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedDocumentList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_document_partial_update(self, id, **kwargs):  # noqa: E501
        """api_document_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this document. (required)
        :param PatchedDocumentRequest body:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_document_partial_update_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_document_partial_update_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_document_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_document_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this document. (required)
        :param PatchedDocumentRequest body:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_document_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_document_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'display_html' in params:
            form_params.append(('display_html', params['display_html']))  # noqa: E501
        if 'published' in params:
            form_params.append(('published', params['published']))  # noqa: E501
        if 'category' in params:
            form_params.append(('category', params['category']))  # noqa: E501
        if 'document_type' in params:
            form_params.append(('document_type', params['document_type']))  # noqa: E501
        if 'publisher' in params:
            form_params.append(('publisher', params['publisher']))  # noqa: E501
        if 'related_documents' in params:
            form_params.append(('related_documents', params['related_documents']))  # noqa: E501
            collection_formats['related_documents'] = 'multi'  # noqa: E501
        if 'sites' in params:
            form_params.append(('sites', params['sites']))  # noqa: E501
            collection_formats['sites'] = 'multi'  # noqa: E501
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'display_html' in params:
            form_params.append(('display_html', params['display_html']))  # noqa: E501
        if 'published' in params:
            form_params.append(('published', params['published']))  # noqa: E501
        if 'category' in params:
            form_params.append(('category', params['category']))  # noqa: E501
        if 'document_type' in params:
            form_params.append(('document_type', params['document_type']))  # noqa: E501
        if 'publisher' in params:
            form_params.append(('publisher', params['publisher']))  # noqa: E501
        if 'related_documents' in params:
            form_params.append(('related_documents', params['related_documents']))  # noqa: E501
            collection_formats['related_documents'] = 'multi'  # noqa: E501
        if 'sites' in params:
            form_params.append(('sites', params['sites']))  # noqa: E501
            collection_formats['sites'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/document/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_document_partial_update(self, id, **kwargs):  # noqa: E501
        """api_document_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this document. (required)
        :param str file2:
        :param str title2:
        :param str description2:
        :param str display_html2:
        :param bool published2:
        :param int category2:
        :param int document_type2:
        :param int publisher2:
        :param list[int] related_documents2:
        :param list[int] sites2:
        :param str file:
        :param str title:
        :param str description:
        :param str display_html:
        :param bool published:
        :param int category:
        :param int document_type:
        :param int publisher:
        :param list[int] related_documents:
        :param list[int] sites:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_document_partial_update_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_document_partial_update_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_document_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_document_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this document. (required)
        :param str file2:
        :param str title2:
        :param str description2:
        :param str display_html2:
        :param bool published2:
        :param int category2:
        :param int document_type2:
        :param int publisher2:
        :param list[int] related_documents2:
        :param list[int] sites2:
        :param str file:
        :param str title:
        :param str description:
        :param str display_html:
        :param bool published:
        :param int category:
        :param int document_type:
        :param int publisher:
        :param list[int] related_documents:
        :param list[int] sites:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'file2', 'title2', 'description2', 'display_html2', 'published2', 'category2', 'document_type2', 'publisher2', 'related_documents2', 'sites2', 'file', 'title', 'description', 'display_html', 'published', 'category', 'document_type', 'publisher', 'related_documents', 'sites']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_document_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_document_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'display_html' in params:
            form_params.append(('display_html', params['display_html']))  # noqa: E501
        if 'published' in params:
            form_params.append(('published', params['published']))  # noqa: E501
        if 'category' in params:
            form_params.append(('category', params['category']))  # noqa: E501
        if 'document_type' in params:
            form_params.append(('document_type', params['document_type']))  # noqa: E501
        if 'publisher' in params:
            form_params.append(('publisher', params['publisher']))  # noqa: E501
        if 'related_documents' in params:
            form_params.append(('related_documents', params['related_documents']))  # noqa: E501
            collection_formats['related_documents'] = 'multi'  # noqa: E501
        if 'sites' in params:
            form_params.append(('sites', params['sites']))  # noqa: E501
            collection_formats['sites'] = 'multi'  # noqa: E501
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'display_html' in params:
            form_params.append(('display_html', params['display_html']))  # noqa: E501
        if 'published' in params:
            form_params.append(('published', params['published']))  # noqa: E501
        if 'category' in params:
            form_params.append(('category', params['category']))  # noqa: E501
        if 'document_type' in params:
            form_params.append(('document_type', params['document_type']))  # noqa: E501
        if 'publisher' in params:
            form_params.append(('publisher', params['publisher']))  # noqa: E501
        if 'related_documents' in params:
            form_params.append(('related_documents', params['related_documents']))  # noqa: E501
            collection_formats['related_documents'] = 'multi'  # noqa: E501
        if 'sites' in params:
            form_params.append(('sites', params['sites']))  # noqa: E501
            collection_formats['sites'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/document/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_document_partial_update(self, id, **kwargs):  # noqa: E501
        """api_document_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this document. (required)
        :param str file2:
        :param str title2:
        :param str description2:
        :param str display_html2:
        :param bool published2:
        :param int category2:
        :param int document_type2:
        :param int publisher2:
        :param list[int] related_documents2:
        :param list[int] sites2:
        :param str file:
        :param str title:
        :param str description:
        :param str display_html:
        :param bool published:
        :param int category:
        :param int document_type:
        :param int publisher:
        :param list[int] related_documents:
        :param list[int] sites:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_document_partial_update_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_document_partial_update_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_document_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_document_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this document. (required)
        :param str file2:
        :param str title2:
        :param str description2:
        :param str display_html2:
        :param bool published2:
        :param int category2:
        :param int document_type2:
        :param int publisher2:
        :param list[int] related_documents2:
        :param list[int] sites2:
        :param str file:
        :param str title:
        :param str description:
        :param str display_html:
        :param bool published:
        :param int category:
        :param int document_type:
        :param int publisher:
        :param list[int] related_documents:
        :param list[int] sites:
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'file2', 'title2', 'description2', 'display_html2', 'published2', 'category2', 'document_type2', 'publisher2', 'related_documents2', 'sites2', 'file', 'title', 'description', 'display_html', 'published', 'category', 'document_type', 'publisher', 'related_documents', 'sites']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_document_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_document_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'display_html' in params:
            form_params.append(('display_html', params['display_html']))  # noqa: E501
        if 'published' in params:
            form_params.append(('published', params['published']))  # noqa: E501
        if 'category' in params:
            form_params.append(('category', params['category']))  # noqa: E501
        if 'document_type' in params:
            form_params.append(('document_type', params['document_type']))  # noqa: E501
        if 'publisher' in params:
            form_params.append(('publisher', params['publisher']))  # noqa: E501
        if 'related_documents' in params:
            form_params.append(('related_documents', params['related_documents']))  # noqa: E501
            collection_formats['related_documents'] = 'multi'  # noqa: E501
        if 'sites' in params:
            form_params.append(('sites', params['sites']))  # noqa: E501
            collection_formats['sites'] = 'multi'  # noqa: E501
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'display_html' in params:
            form_params.append(('display_html', params['display_html']))  # noqa: E501
        if 'published' in params:
            form_params.append(('published', params['published']))  # noqa: E501
        if 'category' in params:
            form_params.append(('category', params['category']))  # noqa: E501
        if 'document_type' in params:
            form_params.append(('document_type', params['document_type']))  # noqa: E501
        if 'publisher' in params:
            form_params.append(('publisher', params['publisher']))  # noqa: E501
        if 'related_documents' in params:
            form_params.append(('related_documents', params['related_documents']))  # noqa: E501
            collection_formats['related_documents'] = 'multi'  # noqa: E501
        if 'sites' in params:
            form_params.append(('sites', params['sites']))  # noqa: E501
            collection_formats['sites'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/document/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_document_retrieve(self, id, **kwargs):  # noqa: E501
        """api_document_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_retrieve(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this document. (required)
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_document_retrieve_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_document_retrieve_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_document_retrieve_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_document_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_retrieve_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this document. (required)
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_document_retrieve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_document_retrieve`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/document/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_document_type_create(self, body, **kwargs):  # noqa: E501
        """api_document_type_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_type_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DocumentTypeRequest body: (required)
        :return: DocumentType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_document_type_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_document_type_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_document_type_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """api_document_type_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_type_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DocumentTypeRequest body: (required)
        :return: DocumentType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_document_type_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_document_type_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/document-type/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DocumentType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_document_type_create(self, name2, description2, name, description, **kwargs):  # noqa: E501
        """api_document_type_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_type_create(name2, description2, name, description, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name2: (required)
        :param str description2: (required)
        :param str name: (required)
        :param str description: (required)
        :return: DocumentType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_document_type_create_with_http_info(name2, description2, name, description, **kwargs)  # noqa: E501
        else:
            (data) = self.api_document_type_create_with_http_info(name2, description2, name, description, **kwargs)  # noqa: E501
            return data

    def api_document_type_create_with_http_info(self, name2, description2, name, description, **kwargs):  # noqa: E501
        """api_document_type_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_type_create_with_http_info(name2, description2, name, description, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name2: (required)
        :param str description2: (required)
        :param str name: (required)
        :param str description: (required)
        :return: DocumentType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name2', 'description2', 'name', 'description']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_document_type_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `api_document_type_create`")  # noqa: E501
        # verify the required parameter 'description2' is set
        if ('description2' not in params or
                params['description2'] is None):
            raise ValueError("Missing the required parameter `description2` when calling `api_document_type_create`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `api_document_type_create`")  # noqa: E501
        # verify the required parameter 'description' is set
        if ('description' not in params or
                params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `api_document_type_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/document-type/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DocumentType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_document_type_create(self, name2, description2, name, description, **kwargs):  # noqa: E501
        """api_document_type_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_type_create(name2, description2, name, description, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name2: (required)
        :param str description2: (required)
        :param str name: (required)
        :param str description: (required)
        :return: DocumentType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_document_type_create_with_http_info(name2, description2, name, description, **kwargs)  # noqa: E501
        else:
            (data) = self.api_document_type_create_with_http_info(name2, description2, name, description, **kwargs)  # noqa: E501
            return data

    def api_document_type_create_with_http_info(self, name2, description2, name, description, **kwargs):  # noqa: E501
        """api_document_type_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_type_create_with_http_info(name2, description2, name, description, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name2: (required)
        :param str description2: (required)
        :param str name: (required)
        :param str description: (required)
        :return: DocumentType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name2', 'description2', 'name', 'description']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_document_type_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `api_document_type_create`")  # noqa: E501
        # verify the required parameter 'description2' is set
        if ('description2' not in params or
                params['description2'] is None):
            raise ValueError("Missing the required parameter `description2` when calling `api_document_type_create`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `api_document_type_create`")  # noqa: E501
        # verify the required parameter 'description' is set
        if ('description' not in params or
                params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `api_document_type_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/document-type/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DocumentType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_document_type_destroy(self, id, **kwargs):  # noqa: E501
        """api_document_type_destroy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_type_destroy(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this document type. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_document_type_destroy_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_document_type_destroy_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_document_type_destroy_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_document_type_destroy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_type_destroy_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this document type. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_document_type_destroy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_document_type_destroy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/document-type/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_document_type_list(self, **kwargs):  # noqa: E501
        """api_document_type_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_type_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: PaginatedDocumentTypeList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_document_type_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_document_type_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_document_type_list_with_http_info(self, **kwargs):  # noqa: E501
        """api_document_type_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_type_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: PaginatedDocumentTypeList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_document_type_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/document-type/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedDocumentTypeList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_document_type_partial_update(self, id, **kwargs):  # noqa: E501
        """api_document_type_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_type_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this document type. (required)
        :param PatchedDocumentTypeRequest body:
        :return: DocumentType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_document_type_partial_update_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_document_type_partial_update_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_document_type_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_document_type_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_type_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this document type. (required)
        :param PatchedDocumentTypeRequest body:
        :return: DocumentType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_document_type_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_document_type_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/document-type/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DocumentType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_document_type_partial_update(self, id, **kwargs):  # noqa: E501
        """api_document_type_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_type_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this document type. (required)
        :param str name2:
        :param str description2:
        :param str name:
        :param str description:
        :return: DocumentType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_document_type_partial_update_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_document_type_partial_update_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_document_type_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_document_type_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_type_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this document type. (required)
        :param str name2:
        :param str description2:
        :param str name:
        :param str description:
        :return: DocumentType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name2', 'description2', 'name', 'description']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_document_type_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_document_type_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/document-type/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DocumentType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_document_type_partial_update(self, id, **kwargs):  # noqa: E501
        """api_document_type_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_type_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this document type. (required)
        :param str name2:
        :param str description2:
        :param str name:
        :param str description:
        :return: DocumentType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_document_type_partial_update_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_document_type_partial_update_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_document_type_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_document_type_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_type_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this document type. (required)
        :param str name2:
        :param str description2:
        :param str name:
        :param str description:
        :return: DocumentType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name2', 'description2', 'name', 'description']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_document_type_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_document_type_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/document-type/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DocumentType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_document_type_retrieve(self, id, **kwargs):  # noqa: E501
        """api_document_type_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_type_retrieve(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this document type. (required)
        :return: DocumentType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_document_type_retrieve_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_document_type_retrieve_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_document_type_retrieve_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_document_type_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_type_retrieve_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this document type. (required)
        :return: DocumentType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_document_type_retrieve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_document_type_retrieve`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/document-type/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DocumentType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_document_type_update(self, body, id, **kwargs):  # noqa: E501
        """api_document_type_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_type_update(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DocumentTypeRequest body: (required)
        :param int id: A unique integer value identifying this document type. (required)
        :return: DocumentType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_document_type_update_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_document_type_update_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def api_document_type_update_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """api_document_type_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_type_update_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DocumentTypeRequest body: (required)
        :param int id: A unique integer value identifying this document type. (required)
        :return: DocumentType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_document_type_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_document_type_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_document_type_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/document-type/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DocumentType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_document_type_update(self, name2, description2, name, description, id, **kwargs):  # noqa: E501
        """api_document_type_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_type_update(name2, description2, name, description, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name2: (required)
        :param str description2: (required)
        :param str name: (required)
        :param str description: (required)
        :param int id: A unique integer value identifying this document type. (required)
        :return: DocumentType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_document_type_update_with_http_info(name2, description2, name, description, id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_document_type_update_with_http_info(name2, description2, name, description, id, **kwargs)  # noqa: E501
            return data

    def api_document_type_update_with_http_info(self, name2, description2, name, description, id, **kwargs):  # noqa: E501
        """api_document_type_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_type_update_with_http_info(name2, description2, name, description, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name2: (required)
        :param str description2: (required)
        :param str name: (required)
        :param str description: (required)
        :param int id: A unique integer value identifying this document type. (required)
        :return: DocumentType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name2', 'description2', 'name', 'description', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_document_type_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `api_document_type_update`")  # noqa: E501
        # verify the required parameter 'description2' is set
        if ('description2' not in params or
                params['description2'] is None):
            raise ValueError("Missing the required parameter `description2` when calling `api_document_type_update`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `api_document_type_update`")  # noqa: E501
        # verify the required parameter 'description' is set
        if ('description' not in params or
                params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `api_document_type_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_document_type_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/document-type/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DocumentType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_document_type_update(self, name2, description2, name, description, id, **kwargs):  # noqa: E501
        """api_document_type_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_type_update(name2, description2, name, description, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name2: (required)
        :param str description2: (required)
        :param str name: (required)
        :param str description: (required)
        :param int id: A unique integer value identifying this document type. (required)
        :return: DocumentType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_document_type_update_with_http_info(name2, description2, name, description, id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_document_type_update_with_http_info(name2, description2, name, description, id, **kwargs)  # noqa: E501
            return data

    def api_document_type_update_with_http_info(self, name2, description2, name, description, id, **kwargs):  # noqa: E501
        """api_document_type_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_type_update_with_http_info(name2, description2, name, description, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name2: (required)
        :param str description2: (required)
        :param str name: (required)
        :param str description: (required)
        :param int id: A unique integer value identifying this document type. (required)
        :return: DocumentType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name2', 'description2', 'name', 'description', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_document_type_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name2' is set
        if ('name2' not in params or
                params['name2'] is None):
            raise ValueError("Missing the required parameter `name2` when calling `api_document_type_update`")  # noqa: E501
        # verify the required parameter 'description2' is set
        if ('description2' not in params or
                params['description2'] is None):
            raise ValueError("Missing the required parameter `description2` when calling `api_document_type_update`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `api_document_type_update`")  # noqa: E501
        # verify the required parameter 'description' is set
        if ('description' not in params or
                params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `api_document_type_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_document_type_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/document-type/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DocumentType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_document_update(self, body, id, **kwargs):  # noqa: E501
        """api_document_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_update(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DocumentRequest body: (required)
        :param int id: A unique integer value identifying this document. (required)
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_document_update_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_document_update_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def api_document_update_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """api_document_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_update_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DocumentRequest body: (required)
        :param int id: A unique integer value identifying this document. (required)
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_document_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_document_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'display_html' in params:
            form_params.append(('display_html', params['display_html']))  # noqa: E501
        if 'published' in params:
            form_params.append(('published', params['published']))  # noqa: E501
        if 'category' in params:
            form_params.append(('category', params['category']))  # noqa: E501
        if 'document_type' in params:
            form_params.append(('document_type', params['document_type']))  # noqa: E501
        if 'publisher' in params:
            form_params.append(('publisher', params['publisher']))  # noqa: E501
        if 'related_documents' in params:
            form_params.append(('related_documents', params['related_documents']))  # noqa: E501
            collection_formats['related_documents'] = 'multi'  # noqa: E501
        if 'sites' in params:
            form_params.append(('sites', params['sites']))  # noqa: E501
            collection_formats['sites'] = 'multi'  # noqa: E501
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'display_html' in params:
            form_params.append(('display_html', params['display_html']))  # noqa: E501
        if 'published' in params:
            form_params.append(('published', params['published']))  # noqa: E501
        if 'category' in params:
            form_params.append(('category', params['category']))  # noqa: E501
        if 'document_type' in params:
            form_params.append(('document_type', params['document_type']))  # noqa: E501
        if 'publisher' in params:
            form_params.append(('publisher', params['publisher']))  # noqa: E501
        if 'related_documents' in params:
            form_params.append(('related_documents', params['related_documents']))  # noqa: E501
            collection_formats['related_documents'] = 'multi'  # noqa: E501
        if 'sites' in params:
            form_params.append(('sites', params['sites']))  # noqa: E501
            collection_formats['sites'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/document/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_document_update(self, file2, title2, description2, display_html2, published2, category2, document_type2, publisher2, related_documents2, sites2, file, title, description, display_html, published, category, document_type, publisher, related_documents, sites, id, **kwargs):  # noqa: E501
        """api_document_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_update(file2, title2, description2, display_html2, published2, category2, document_type2, publisher2, related_documents2, sites2, file, title, description, display_html, published, category, document_type, publisher, related_documents, sites, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file2: (required)
        :param str title2: (required)
        :param str description2: (required)
        :param str display_html2: (required)
        :param bool published2: (required)
        :param int category2: (required)
        :param int document_type2: (required)
        :param int publisher2: (required)
        :param list[int] related_documents2: (required)
        :param list[int] sites2: (required)
        :param str file: (required)
        :param str title: (required)
        :param str description: (required)
        :param str display_html: (required)
        :param bool published: (required)
        :param int category: (required)
        :param int document_type: (required)
        :param int publisher: (required)
        :param list[int] related_documents: (required)
        :param list[int] sites: (required)
        :param int id: A unique integer value identifying this document. (required)
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_document_update_with_http_info(file2, title2, description2, display_html2, published2, category2, document_type2, publisher2, related_documents2, sites2, file, title, description, display_html, published, category, document_type, publisher, related_documents, sites, id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_document_update_with_http_info(file2, title2, description2, display_html2, published2, category2, document_type2, publisher2, related_documents2, sites2, file, title, description, display_html, published, category, document_type, publisher, related_documents, sites, id, **kwargs)  # noqa: E501
            return data

    def api_document_update_with_http_info(self, file2, title2, description2, display_html2, published2, category2, document_type2, publisher2, related_documents2, sites2, file, title, description, display_html, published, category, document_type, publisher, related_documents, sites, id, **kwargs):  # noqa: E501
        """api_document_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_update_with_http_info(file2, title2, description2, display_html2, published2, category2, document_type2, publisher2, related_documents2, sites2, file, title, description, display_html, published, category, document_type, publisher, related_documents, sites, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file2: (required)
        :param str title2: (required)
        :param str description2: (required)
        :param str display_html2: (required)
        :param bool published2: (required)
        :param int category2: (required)
        :param int document_type2: (required)
        :param int publisher2: (required)
        :param list[int] related_documents2: (required)
        :param list[int] sites2: (required)
        :param str file: (required)
        :param str title: (required)
        :param str description: (required)
        :param str display_html: (required)
        :param bool published: (required)
        :param int category: (required)
        :param int document_type: (required)
        :param int publisher: (required)
        :param list[int] related_documents: (required)
        :param list[int] sites: (required)
        :param int id: A unique integer value identifying this document. (required)
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file2', 'title2', 'description2', 'display_html2', 'published2', 'category2', 'document_type2', 'publisher2', 'related_documents2', 'sites2', 'file', 'title', 'description', 'display_html', 'published', 'category', 'document_type', 'publisher', 'related_documents', 'sites', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_document_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file2' is set
        if ('file2' not in params or
                params['file2'] is None):
            raise ValueError("Missing the required parameter `file2` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'title2' is set
        if ('title2' not in params or
                params['title2'] is None):
            raise ValueError("Missing the required parameter `title2` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'description2' is set
        if ('description2' not in params or
                params['description2'] is None):
            raise ValueError("Missing the required parameter `description2` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'display_html2' is set
        if ('display_html2' not in params or
                params['display_html2'] is None):
            raise ValueError("Missing the required parameter `display_html2` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'published2' is set
        if ('published2' not in params or
                params['published2'] is None):
            raise ValueError("Missing the required parameter `published2` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'category2' is set
        if ('category2' not in params or
                params['category2'] is None):
            raise ValueError("Missing the required parameter `category2` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'document_type2' is set
        if ('document_type2' not in params or
                params['document_type2'] is None):
            raise ValueError("Missing the required parameter `document_type2` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'publisher2' is set
        if ('publisher2' not in params or
                params['publisher2'] is None):
            raise ValueError("Missing the required parameter `publisher2` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'related_documents2' is set
        if ('related_documents2' not in params or
                params['related_documents2'] is None):
            raise ValueError("Missing the required parameter `related_documents2` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'sites2' is set
        if ('sites2' not in params or
                params['sites2'] is None):
            raise ValueError("Missing the required parameter `sites2` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'title' is set
        if ('title' not in params or
                params['title'] is None):
            raise ValueError("Missing the required parameter `title` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'description' is set
        if ('description' not in params or
                params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'display_html' is set
        if ('display_html' not in params or
                params['display_html'] is None):
            raise ValueError("Missing the required parameter `display_html` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'published' is set
        if ('published' not in params or
                params['published'] is None):
            raise ValueError("Missing the required parameter `published` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'category' is set
        if ('category' not in params or
                params['category'] is None):
            raise ValueError("Missing the required parameter `category` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'document_type' is set
        if ('document_type' not in params or
                params['document_type'] is None):
            raise ValueError("Missing the required parameter `document_type` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'publisher' is set
        if ('publisher' not in params or
                params['publisher'] is None):
            raise ValueError("Missing the required parameter `publisher` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'related_documents' is set
        if ('related_documents' not in params or
                params['related_documents'] is None):
            raise ValueError("Missing the required parameter `related_documents` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'sites' is set
        if ('sites' not in params or
                params['sites'] is None):
            raise ValueError("Missing the required parameter `sites` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_document_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'display_html' in params:
            form_params.append(('display_html', params['display_html']))  # noqa: E501
        if 'published' in params:
            form_params.append(('published', params['published']))  # noqa: E501
        if 'category' in params:
            form_params.append(('category', params['category']))  # noqa: E501
        if 'document_type' in params:
            form_params.append(('document_type', params['document_type']))  # noqa: E501
        if 'publisher' in params:
            form_params.append(('publisher', params['publisher']))  # noqa: E501
        if 'related_documents' in params:
            form_params.append(('related_documents', params['related_documents']))  # noqa: E501
            collection_formats['related_documents'] = 'multi'  # noqa: E501
        if 'sites' in params:
            form_params.append(('sites', params['sites']))  # noqa: E501
            collection_formats['sites'] = 'multi'  # noqa: E501
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'display_html' in params:
            form_params.append(('display_html', params['display_html']))  # noqa: E501
        if 'published' in params:
            form_params.append(('published', params['published']))  # noqa: E501
        if 'category' in params:
            form_params.append(('category', params['category']))  # noqa: E501
        if 'document_type' in params:
            form_params.append(('document_type', params['document_type']))  # noqa: E501
        if 'publisher' in params:
            form_params.append(('publisher', params['publisher']))  # noqa: E501
        if 'related_documents' in params:
            form_params.append(('related_documents', params['related_documents']))  # noqa: E501
            collection_formats['related_documents'] = 'multi'  # noqa: E501
        if 'sites' in params:
            form_params.append(('sites', params['sites']))  # noqa: E501
            collection_formats['sites'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/document/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_document_update(self, file2, title2, description2, display_html2, published2, category2, document_type2, publisher2, related_documents2, sites2, file, title, description, display_html, published, category, document_type, publisher, related_documents, sites, id, **kwargs):  # noqa: E501
        """api_document_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_update(file2, title2, description2, display_html2, published2, category2, document_type2, publisher2, related_documents2, sites2, file, title, description, display_html, published, category, document_type, publisher, related_documents, sites, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file2: (required)
        :param str title2: (required)
        :param str description2: (required)
        :param str display_html2: (required)
        :param bool published2: (required)
        :param int category2: (required)
        :param int document_type2: (required)
        :param int publisher2: (required)
        :param list[int] related_documents2: (required)
        :param list[int] sites2: (required)
        :param str file: (required)
        :param str title: (required)
        :param str description: (required)
        :param str display_html: (required)
        :param bool published: (required)
        :param int category: (required)
        :param int document_type: (required)
        :param int publisher: (required)
        :param list[int] related_documents: (required)
        :param list[int] sites: (required)
        :param int id: A unique integer value identifying this document. (required)
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_document_update_with_http_info(file2, title2, description2, display_html2, published2, category2, document_type2, publisher2, related_documents2, sites2, file, title, description, display_html, published, category, document_type, publisher, related_documents, sites, id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_document_update_with_http_info(file2, title2, description2, display_html2, published2, category2, document_type2, publisher2, related_documents2, sites2, file, title, description, display_html, published, category, document_type, publisher, related_documents, sites, id, **kwargs)  # noqa: E501
            return data

    def api_document_update_with_http_info(self, file2, title2, description2, display_html2, published2, category2, document_type2, publisher2, related_documents2, sites2, file, title, description, display_html, published, category, document_type, publisher, related_documents, sites, id, **kwargs):  # noqa: E501
        """api_document_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_document_update_with_http_info(file2, title2, description2, display_html2, published2, category2, document_type2, publisher2, related_documents2, sites2, file, title, description, display_html, published, category, document_type, publisher, related_documents, sites, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file2: (required)
        :param str title2: (required)
        :param str description2: (required)
        :param str display_html2: (required)
        :param bool published2: (required)
        :param int category2: (required)
        :param int document_type2: (required)
        :param int publisher2: (required)
        :param list[int] related_documents2: (required)
        :param list[int] sites2: (required)
        :param str file: (required)
        :param str title: (required)
        :param str description: (required)
        :param str display_html: (required)
        :param bool published: (required)
        :param int category: (required)
        :param int document_type: (required)
        :param int publisher: (required)
        :param list[int] related_documents: (required)
        :param list[int] sites: (required)
        :param int id: A unique integer value identifying this document. (required)
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file2', 'title2', 'description2', 'display_html2', 'published2', 'category2', 'document_type2', 'publisher2', 'related_documents2', 'sites2', 'file', 'title', 'description', 'display_html', 'published', 'category', 'document_type', 'publisher', 'related_documents', 'sites', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_document_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file2' is set
        if ('file2' not in params or
                params['file2'] is None):
            raise ValueError("Missing the required parameter `file2` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'title2' is set
        if ('title2' not in params or
                params['title2'] is None):
            raise ValueError("Missing the required parameter `title2` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'description2' is set
        if ('description2' not in params or
                params['description2'] is None):
            raise ValueError("Missing the required parameter `description2` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'display_html2' is set
        if ('display_html2' not in params or
                params['display_html2'] is None):
            raise ValueError("Missing the required parameter `display_html2` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'published2' is set
        if ('published2' not in params or
                params['published2'] is None):
            raise ValueError("Missing the required parameter `published2` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'category2' is set
        if ('category2' not in params or
                params['category2'] is None):
            raise ValueError("Missing the required parameter `category2` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'document_type2' is set
        if ('document_type2' not in params or
                params['document_type2'] is None):
            raise ValueError("Missing the required parameter `document_type2` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'publisher2' is set
        if ('publisher2' not in params or
                params['publisher2'] is None):
            raise ValueError("Missing the required parameter `publisher2` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'related_documents2' is set
        if ('related_documents2' not in params or
                params['related_documents2'] is None):
            raise ValueError("Missing the required parameter `related_documents2` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'sites2' is set
        if ('sites2' not in params or
                params['sites2'] is None):
            raise ValueError("Missing the required parameter `sites2` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'title' is set
        if ('title' not in params or
                params['title'] is None):
            raise ValueError("Missing the required parameter `title` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'description' is set
        if ('description' not in params or
                params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'display_html' is set
        if ('display_html' not in params or
                params['display_html'] is None):
            raise ValueError("Missing the required parameter `display_html` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'published' is set
        if ('published' not in params or
                params['published'] is None):
            raise ValueError("Missing the required parameter `published` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'category' is set
        if ('category' not in params or
                params['category'] is None):
            raise ValueError("Missing the required parameter `category` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'document_type' is set
        if ('document_type' not in params or
                params['document_type'] is None):
            raise ValueError("Missing the required parameter `document_type` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'publisher' is set
        if ('publisher' not in params or
                params['publisher'] is None):
            raise ValueError("Missing the required parameter `publisher` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'related_documents' is set
        if ('related_documents' not in params or
                params['related_documents'] is None):
            raise ValueError("Missing the required parameter `related_documents` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'sites' is set
        if ('sites' not in params or
                params['sites'] is None):
            raise ValueError("Missing the required parameter `sites` when calling `api_document_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_document_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'display_html' in params:
            form_params.append(('display_html', params['display_html']))  # noqa: E501
        if 'published' in params:
            form_params.append(('published', params['published']))  # noqa: E501
        if 'category' in params:
            form_params.append(('category', params['category']))  # noqa: E501
        if 'document_type' in params:
            form_params.append(('document_type', params['document_type']))  # noqa: E501
        if 'publisher' in params:
            form_params.append(('publisher', params['publisher']))  # noqa: E501
        if 'related_documents' in params:
            form_params.append(('related_documents', params['related_documents']))  # noqa: E501
            collection_formats['related_documents'] = 'multi'  # noqa: E501
        if 'sites' in params:
            form_params.append(('sites', params['sites']))  # noqa: E501
            collection_formats['sites'] = 'multi'  # noqa: E501
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'display_html' in params:
            form_params.append(('display_html', params['display_html']))  # noqa: E501
        if 'published' in params:
            form_params.append(('published', params['published']))  # noqa: E501
        if 'category' in params:
            form_params.append(('category', params['category']))  # noqa: E501
        if 'document_type' in params:
            form_params.append(('document_type', params['document_type']))  # noqa: E501
        if 'publisher' in params:
            form_params.append(('publisher', params['publisher']))  # noqa: E501
        if 'related_documents' in params:
            form_params.append(('related_documents', params['related_documents']))  # noqa: E501
            collection_formats['related_documents'] = 'multi'  # noqa: E501
        if 'sites' in params:
            form_params.append(('sites', params['sites']))  # noqa: E501
            collection_formats['sites'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/document/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_search_create(self, body, **kwargs):  # noqa: E501
        """api_search_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchRequest body: (required)
        :return: Search
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_search_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_search_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_search_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """api_search_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchRequest body: (required)
        :return: Search
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_search_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_search_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'metadata' in params:
            form_params.append(('metadata', params['metadata']))  # noqa: E501
            collection_formats['metadata'] = 'multi'  # noqa: E501
        if 'query' in params:
            form_params.append(('query', params['query']))  # noqa: E501
        if 'metadata' in params:
            form_params.append(('metadata', params['metadata']))  # noqa: E501
            collection_formats['metadata'] = 'multi'  # noqa: E501
        if 'query' in params:
            form_params.append(('query', params['query']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/search/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Search',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_search_create(self, metadata2, query2, metadata, query, **kwargs):  # noqa: E501
        """api_search_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_create(metadata2, query2, metadata, query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[SearchMetadataRequest] metadata2: (required)
        :param str query2: (required)
        :param list[SearchMetadataRequest] metadata: (required)
        :param str query: (required)
        :return: Search
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_search_create_with_http_info(metadata2, query2, metadata, query, **kwargs)  # noqa: E501
        else:
            (data) = self.api_search_create_with_http_info(metadata2, query2, metadata, query, **kwargs)  # noqa: E501
            return data

    def api_search_create_with_http_info(self, metadata2, query2, metadata, query, **kwargs):  # noqa: E501
        """api_search_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_create_with_http_info(metadata2, query2, metadata, query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[SearchMetadataRequest] metadata2: (required)
        :param str query2: (required)
        :param list[SearchMetadataRequest] metadata: (required)
        :param str query: (required)
        :return: Search
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['metadata2', 'query2', 'metadata', 'query']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_search_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'metadata2' is set
        if ('metadata2' not in params or
                params['metadata2'] is None):
            raise ValueError("Missing the required parameter `metadata2` when calling `api_search_create`")  # noqa: E501
        # verify the required parameter 'query2' is set
        if ('query2' not in params or
                params['query2'] is None):
            raise ValueError("Missing the required parameter `query2` when calling `api_search_create`")  # noqa: E501
        # verify the required parameter 'metadata' is set
        if ('metadata' not in params or
                params['metadata'] is None):
            raise ValueError("Missing the required parameter `metadata` when calling `api_search_create`")  # noqa: E501
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `api_search_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'metadata' in params:
            form_params.append(('metadata', params['metadata']))  # noqa: E501
            collection_formats['metadata'] = 'multi'  # noqa: E501
        if 'query' in params:
            form_params.append(('query', params['query']))  # noqa: E501
        if 'metadata' in params:
            form_params.append(('metadata', params['metadata']))  # noqa: E501
            collection_formats['metadata'] = 'multi'  # noqa: E501
        if 'query' in params:
            form_params.append(('query', params['query']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/search/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Search',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_search_create(self, metadata2, query2, metadata, query, **kwargs):  # noqa: E501
        """api_search_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_create(metadata2, query2, metadata, query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[SearchMetadataRequest] metadata2: (required)
        :param str query2: (required)
        :param list[SearchMetadataRequest] metadata: (required)
        :param str query: (required)
        :return: Search
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_search_create_with_http_info(metadata2, query2, metadata, query, **kwargs)  # noqa: E501
        else:
            (data) = self.api_search_create_with_http_info(metadata2, query2, metadata, query, **kwargs)  # noqa: E501
            return data

    def api_search_create_with_http_info(self, metadata2, query2, metadata, query, **kwargs):  # noqa: E501
        """api_search_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_create_with_http_info(metadata2, query2, metadata, query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[SearchMetadataRequest] metadata2: (required)
        :param str query2: (required)
        :param list[SearchMetadataRequest] metadata: (required)
        :param str query: (required)
        :return: Search
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['metadata2', 'query2', 'metadata', 'query']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_search_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'metadata2' is set
        if ('metadata2' not in params or
                params['metadata2'] is None):
            raise ValueError("Missing the required parameter `metadata2` when calling `api_search_create`")  # noqa: E501
        # verify the required parameter 'query2' is set
        if ('query2' not in params or
                params['query2'] is None):
            raise ValueError("Missing the required parameter `query2` when calling `api_search_create`")  # noqa: E501
        # verify the required parameter 'metadata' is set
        if ('metadata' not in params or
                params['metadata'] is None):
            raise ValueError("Missing the required parameter `metadata` when calling `api_search_create`")  # noqa: E501
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `api_search_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'metadata' in params:
            form_params.append(('metadata', params['metadata']))  # noqa: E501
            collection_formats['metadata'] = 'multi'  # noqa: E501
        if 'query' in params:
            form_params.append(('query', params['query']))  # noqa: E501
        if 'metadata' in params:
            form_params.append(('metadata', params['metadata']))  # noqa: E501
            collection_formats['metadata'] = 'multi'  # noqa: E501
        if 'query' in params:
            form_params.append(('query', params['query']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/search/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Search',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_search_destroy(self, id, **kwargs):  # noqa: E501
        """api_search_destroy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_destroy(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this search request. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_search_destroy_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_search_destroy_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_search_destroy_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_search_destroy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_destroy_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this search request. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_search_destroy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_search_destroy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/search/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_search_list(self, **kwargs):  # noqa: E501
        """api_search_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: PaginatedSearchList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_search_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_search_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_search_list_with_http_info(self, **kwargs):  # noqa: E501
        """api_search_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: PaginatedSearchList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_search_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/search/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedSearchList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_search_metadata_retrieve(self, id, **kwargs):  # noqa: E501
        """api_search_metadata_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_metadata_retrieve(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this search request. (required)
        :return: Search
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_search_metadata_retrieve_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_search_metadata_retrieve_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_search_metadata_retrieve_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_search_metadata_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_metadata_retrieve_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this search request. (required)
        :return: Search
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_search_metadata_retrieve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_search_metadata_retrieve`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/search/{id}/metadata/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Search',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_search_partial_update(self, id, **kwargs):  # noqa: E501
        """api_search_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this search request. (required)
        :param PatchedSearchRequest body:
        :return: Search
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_search_partial_update_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_search_partial_update_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_search_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_search_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this search request. (required)
        :param PatchedSearchRequest body:
        :return: Search
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_search_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_search_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'metadata' in params:
            form_params.append(('metadata', params['metadata']))  # noqa: E501
            collection_formats['metadata'] = 'multi'  # noqa: E501
        if 'query' in params:
            form_params.append(('query', params['query']))  # noqa: E501
        if 'metadata' in params:
            form_params.append(('metadata', params['metadata']))  # noqa: E501
            collection_formats['metadata'] = 'multi'  # noqa: E501
        if 'query' in params:
            form_params.append(('query', params['query']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/search/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Search',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_search_partial_update(self, id, **kwargs):  # noqa: E501
        """api_search_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this search request. (required)
        :param list[SearchMetadataRequest] metadata2:
        :param str query2:
        :param list[SearchMetadataRequest] metadata:
        :param str query:
        :return: Search
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_search_partial_update_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_search_partial_update_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_search_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_search_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this search request. (required)
        :param list[SearchMetadataRequest] metadata2:
        :param str query2:
        :param list[SearchMetadataRequest] metadata:
        :param str query:
        :return: Search
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'metadata2', 'query2', 'metadata', 'query']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_search_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_search_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'metadata' in params:
            form_params.append(('metadata', params['metadata']))  # noqa: E501
            collection_formats['metadata'] = 'multi'  # noqa: E501
        if 'query' in params:
            form_params.append(('query', params['query']))  # noqa: E501
        if 'metadata' in params:
            form_params.append(('metadata', params['metadata']))  # noqa: E501
            collection_formats['metadata'] = 'multi'  # noqa: E501
        if 'query' in params:
            form_params.append(('query', params['query']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/search/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Search',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_search_partial_update(self, id, **kwargs):  # noqa: E501
        """api_search_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_partial_update(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this search request. (required)
        :param list[SearchMetadataRequest] metadata2:
        :param str query2:
        :param list[SearchMetadataRequest] metadata:
        :param str query:
        :return: Search
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_search_partial_update_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_search_partial_update_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_search_partial_update_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_search_partial_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_partial_update_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this search request. (required)
        :param list[SearchMetadataRequest] metadata2:
        :param str query2:
        :param list[SearchMetadataRequest] metadata:
        :param str query:
        :return: Search
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'metadata2', 'query2', 'metadata', 'query']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_search_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_search_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'metadata' in params:
            form_params.append(('metadata', params['metadata']))  # noqa: E501
            collection_formats['metadata'] = 'multi'  # noqa: E501
        if 'query' in params:
            form_params.append(('query', params['query']))  # noqa: E501
        if 'metadata' in params:
            form_params.append(('metadata', params['metadata']))  # noqa: E501
            collection_formats['metadata'] = 'multi'  # noqa: E501
        if 'query' in params:
            form_params.append(('query', params['query']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/search/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Search',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_search_retrieve(self, id, **kwargs):  # noqa: E501
        """api_search_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_retrieve(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this search request. (required)
        :return: Search
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_search_retrieve_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_search_retrieve_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_search_retrieve_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_search_retrieve  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_retrieve_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this search request. (required)
        :return: Search
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_search_retrieve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_search_retrieve`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/search/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Search',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_search_update(self, body, id, **kwargs):  # noqa: E501
        """api_search_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_update(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchRequest body: (required)
        :param int id: A unique integer value identifying this search request. (required)
        :return: Search
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_search_update_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_search_update_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def api_search_update_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """api_search_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_update_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchRequest body: (required)
        :param int id: A unique integer value identifying this search request. (required)
        :return: Search
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_search_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_search_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_search_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'metadata' in params:
            form_params.append(('metadata', params['metadata']))  # noqa: E501
            collection_formats['metadata'] = 'multi'  # noqa: E501
        if 'query' in params:
            form_params.append(('query', params['query']))  # noqa: E501
        if 'metadata' in params:
            form_params.append(('metadata', params['metadata']))  # noqa: E501
            collection_formats['metadata'] = 'multi'  # noqa: E501
        if 'query' in params:
            form_params.append(('query', params['query']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/search/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Search',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_search_update(self, metadata2, query2, metadata, query, id, **kwargs):  # noqa: E501
        """api_search_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_update(metadata2, query2, metadata, query, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[SearchMetadataRequest] metadata2: (required)
        :param str query2: (required)
        :param list[SearchMetadataRequest] metadata: (required)
        :param str query: (required)
        :param int id: A unique integer value identifying this search request. (required)
        :return: Search
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_search_update_with_http_info(metadata2, query2, metadata, query, id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_search_update_with_http_info(metadata2, query2, metadata, query, id, **kwargs)  # noqa: E501
            return data

    def api_search_update_with_http_info(self, metadata2, query2, metadata, query, id, **kwargs):  # noqa: E501
        """api_search_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_update_with_http_info(metadata2, query2, metadata, query, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[SearchMetadataRequest] metadata2: (required)
        :param str query2: (required)
        :param list[SearchMetadataRequest] metadata: (required)
        :param str query: (required)
        :param int id: A unique integer value identifying this search request. (required)
        :return: Search
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['metadata2', 'query2', 'metadata', 'query', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_search_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'metadata2' is set
        if ('metadata2' not in params or
                params['metadata2'] is None):
            raise ValueError("Missing the required parameter `metadata2` when calling `api_search_update`")  # noqa: E501
        # verify the required parameter 'query2' is set
        if ('query2' not in params or
                params['query2'] is None):
            raise ValueError("Missing the required parameter `query2` when calling `api_search_update`")  # noqa: E501
        # verify the required parameter 'metadata' is set
        if ('metadata' not in params or
                params['metadata'] is None):
            raise ValueError("Missing the required parameter `metadata` when calling `api_search_update`")  # noqa: E501
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `api_search_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_search_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'metadata' in params:
            form_params.append(('metadata', params['metadata']))  # noqa: E501
            collection_formats['metadata'] = 'multi'  # noqa: E501
        if 'query' in params:
            form_params.append(('query', params['query']))  # noqa: E501
        if 'metadata' in params:
            form_params.append(('metadata', params['metadata']))  # noqa: E501
            collection_formats['metadata'] = 'multi'  # noqa: E501
        if 'query' in params:
            form_params.append(('query', params['query']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/search/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Search',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_search_update(self, metadata2, query2, metadata, query, id, **kwargs):  # noqa: E501
        """api_search_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_update(metadata2, query2, metadata, query, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[SearchMetadataRequest] metadata2: (required)
        :param str query2: (required)
        :param list[SearchMetadataRequest] metadata: (required)
        :param str query: (required)
        :param int id: A unique integer value identifying this search request. (required)
        :return: Search
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_search_update_with_http_info(metadata2, query2, metadata, query, id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_search_update_with_http_info(metadata2, query2, metadata, query, id, **kwargs)  # noqa: E501
            return data

    def api_search_update_with_http_info(self, metadata2, query2, metadata, query, id, **kwargs):  # noqa: E501
        """api_search_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_update_with_http_info(metadata2, query2, metadata, query, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[SearchMetadataRequest] metadata2: (required)
        :param str query2: (required)
        :param list[SearchMetadataRequest] metadata: (required)
        :param str query: (required)
        :param int id: A unique integer value identifying this search request. (required)
        :return: Search
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['metadata2', 'query2', 'metadata', 'query', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_search_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'metadata2' is set
        if ('metadata2' not in params or
                params['metadata2'] is None):
            raise ValueError("Missing the required parameter `metadata2` when calling `api_search_update`")  # noqa: E501
        # verify the required parameter 'query2' is set
        if ('query2' not in params or
                params['query2'] is None):
            raise ValueError("Missing the required parameter `query2` when calling `api_search_update`")  # noqa: E501
        # verify the required parameter 'metadata' is set
        if ('metadata' not in params or
                params['metadata'] is None):
            raise ValueError("Missing the required parameter `metadata` when calling `api_search_update`")  # noqa: E501
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `api_search_update`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_search_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'metadata' in params:
            form_params.append(('metadata', params['metadata']))  # noqa: E501
            collection_formats['metadata'] = 'multi'  # noqa: E501
        if 'query' in params:
            form_params.append(('query', params['query']))  # noqa: E501
        if 'metadata' in params:
            form_params.append(('metadata', params['metadata']))  # noqa: E501
            collection_formats['metadata'] = 'multi'  # noqa: E501
        if 'query' in params:
            form_params.append(('query', params['query']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/search/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Search',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
